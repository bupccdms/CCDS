@model qms.Models.tblPlayListItem

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@{
    ViewBag.Title = "Update Play List";

    <style>
        #volume1 {
            width: 250px;
            /*height: 30px;*/
            height: 7px;
            position: absolute;
            cursor: pointer;
            background: #444;
            top: 50%;
            left: 50%;
            margin-left: -125px;
            margin-top: -15px;
            box-shadow: inset 0 0 15px #000;
        }

        #volume1 .vol-box {
            font-size: 14px;
            display: block;
            text-align: center;
            margin-top: 5px;
            /*margin-top: 50px;*/
        }

        #volume1 .control {
            position: absolute;
            top: 0;
            left: 0;
            /*width: 125px;*/
            /*height: 30px;*/
            height: 7px;
            background: #3498db;
            box-shadow: inset 0 0 2px #000;
        }

        #volume1 .control .knob {
            position: absolute;
            top: -4px;
            right: -5px;
            /* height: 30px; */
            height: 15px;
            width: 15px;
            background: #FFF;
            box-shadow: 0 0 1px #000;
            border-radius: 50%;
        }
    </style>
}
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<div class="container">
    <div class="row">
        <h4 class="page-head-line">Play List > @Model.playlist_name> Item > Edit</h4>

        <div class="col-md-7">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.HiddenFor(model => model.playlistitem_id)
                @Html.HiddenFor(model => model.playlist_id)
                @Html.HiddenFor(m => m.item_url)
                @Html.HiddenFor(m => m.file_type)
                @Html.HiddenFor(m => m.duration)
                @Html.HiddenFor(m => m.duration_in_second)
                @Html.HiddenFor(m => m.end_time)
                @Html.HiddenFor(m => m.start_time)
                @Html.HiddenFor(m => m.volume)
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <div class="col-md-3">
                        Playlist Name
                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.playlist_name, new { htmlAttributes = new { @class = "form-control Next disabled", @disabled = "disabled", @placeholder = "Playlist Name", } })
                        @Html.ValidationMessageFor(model => model.playlist_name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-3">
                        File Name
                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.file_name, new { htmlAttributes = new { @class = "form-control Next", @readonly = "readonly", @placeholder = "File Name" } })
                        @Html.ValidationMessageFor(model => model.file_name, "", new { @class = "text-danger" })
                    </div>

                </div>
                @*<div class="form-group">
            <div class="col-md-3">
                Start Time
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.start_time, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "Start Time" } })
                @Html.ValidationMessageFor(model => model.start_time, "", new { @class = "text-danger" })
            </div>

        </div>
        <div class="form-group">
            <div class="col-md-3">
                End Time
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.end_time, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "End Time" } })
                @Html.ValidationMessageFor(model => model.end_time, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-3">
                Duration In Second
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.duration_in_second, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "Duration In Second" } })
                @Html.ValidationMessageFor(model => model.duration_in_second, "", new { @class = "text-danger" })
            </div>

        </div>*@
                <div class="form-group">
                    <div class="col-md-3">
                        Start Time
                    </div>
                    <div class="col-md-9">
                        <div class="col-md-2">
                            <label>Munites</label>
                            @Html.EditorFor(model => model.startTimeInMinutes, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "Start Time" } })
                            @Html.ValidationMessageFor(model => model.startTimeInMinutes, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-2">
                            <label>Seconds</label>
                            @Html.EditorFor(model => model.startTimeInSeconds, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "Second" } })
                            @Html.ValidationMessageFor(model => model.startTimeInSeconds, "", new { @class = "text-danger" })
                        </div>
                        <input type="hidden" name="start_time" id="hidStartTime" value="" />
                    </div>

                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        End Time
                    </div>
                    <div class="col-md-9">
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.endTimeInMunites, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "End Time", @type = "number" } })
                            @Html.ValidationMessageFor(model => model.endTimeInMunites, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.endTimeInSeconds, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "End Time", @type = "number" } })
                            @Html.ValidationMessageFor(model => model.endTimeInSeconds, "", new { @class = "text-danger" })
                        </div>
                        <input type="hidden" name="end_time" id="hidEndTime" value="" />
                    </div>
                </div>



                <div class="form-group">
                    <div class="col-md-3">
                        Duration In Second
                    </div>
                    <div class="col-md-9">
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.durationInMunites, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "End Time" } })
                            @Html.ValidationMessageFor(model => model.durationInMunites, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.durationInSecond, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "End Time" } })
                            @Html.ValidationMessageFor(model => model.durationInSecond, "", new { @class = "text-danger" })
                        </div>
                        <input type="hidden" name="duration_in_second" id="hidDuration" value="" />
                    </div>

                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        Sort Order
                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.sort_order, new { htmlAttributes = new { @class = "form-control Next", @placeholder = "Sort Order" } })
                        @Html.ValidationMessageFor(model => model.sort_order, "", new { @class = "text-danger" })
                    </div>

                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.CheckBoxFor(model => model.bool_show_in_mobile, new { htmlAttributes = new { @class = "form-control" } }) Is show in mobile?
                        @Html.ValidationMessageFor(model => model.bool_show_in_mobile, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.CheckBoxFor(model => model.bool_is_in_mute, new { htmlAttributes = new { @class = "form-control" } }) Is Mute?
                        @Html.ValidationMessageFor(model => model.bool_is_in_mute, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6" style="margin-top:25px;">
                        <div id="volumecircle">
                            <div id="volume1">
                                <div class="control">
                                    <span class="knob"></span>
                                </div>
                                <span class="vol-box" id="volumeValue">@ViewBag.Volume</span>
                                @*<input type="hidden" name="volume" id="hidVolume" value="" />*@
                            </div>
                        </div>
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-8">
                        <input type="submit" value="Update" class="btn btn-color" />
                        <button class="btn btn-color">
                            @Html.ActionLink("Back to List", "Index", new { playlist_id = Model.playlist_id })
                        </button>
                    </div>
                </div>
            </div>
            }
        </div>

    </div>
</div>

@section scripts{
    <script src="~/Scripts/modal/modal.js"></script>
    <script src="~/Scripts/sqms/play-list.js"></script>
    @*<script src="~/Scripts/sqms/department.js"></script>*@

    <script>
        //based on: http://jsfiddle.net/TGd96/

        var volume1 = {

            init: function () {
                var x = $("#volumeValue").text();
                if (parseInt(x) > 0) {
                    $('#volume1 .control').animate({ width: x + '%' }, 100);
                };
                $('#volume1').on('click', volume1.change);
                $('#volume1 .control').on('mousedown', volume1.drag);
            },

            change: function (e) {
                e.preventDefault();
                var percent = helper.getFrac(e, $(this)) * 100;
                $('#volume1 .control').animate({ width: percent + '%' }, 100);
                volume1.update(percent);
            },

            update: function (percent) {
                $('.vol-box').text(Math.round(percent));
                //var hidVolume = document.getElementById('hidVolume');
                //hidVolume.value = Math.round(percent);
                var volume = document.getElementById('volume');
                volume.value = Math.round(percent);
            },

            drag: function (e) {
                e.preventDefault();
                $(document).on('mousemove', volume1.moveHandler);
                $(document).on('mouseup', volume1.stopHandler);
            },

            moveHandler: function (e) {
                var holderOffset = $('#volume1').offset().left,
                    sliderWidth = $('#volume1').width(),
                    posX = Math.min(Math.max(0, e.pageX - holderOffset), sliderWidth);

                $('#volume1 .control').width(posX);
                volume1.update(posX / sliderWidth * 100);
            },

            stopHandler: function () {
                $(document).off('mousemove', volume1.moveHandler);
                $(document).off('mouseup', volume1.stopHandler);
            }

        }

        var helper = {
            getFrac: function (e, $this) {
                return (e.pageX - $this.offset().left) / $this.width();
            }
        }

        volume1.init();
    </script>
}